<?php

/**
 * @file
 * Code for the Schemax Base feature.
 */
include_once 'schemax_base.features.inc';

/**
 *
 */
function schemax_base_entity_info_alter(&$entity_info) {
  $entity_info['fieldable_panels_pane']['bundles']['schemax_base_featured_content'] = array(
    'label' => t('Featured Content'),
    'pane category' => t('Fielded panes'),
    'pane top level' => FALSE, // set to true to make this show as a top level icon
    'pane icon' => '/sites/all/themes/schemax_omega/logo.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/schemax-base-featured-content',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_preprocess_field().
 */
function schemax_base_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_image' && $vars['element']['#bundle'] == 'fieldable_panels_pane' && $vars['element']['#view_mode'] == 'featured_content') {
    $vars['classes_array'][] = 'fpp_featured_content';
  }
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function schemax_base_og_context_negotiation_info() {
  $providers = array();

  $providers['schemax_view'] = array(
    'name' => t('View'),
    'description' => t('Select groups if they exist in the argument of a view page display.'),
    'callback' => 'schemax_base_view_og_context_handler',
  );

  $providers['schemax_availability'] = array(
    'name' => t('Availability'),
    'description' => t('Select groups if they exist in the argument of an availability menu router item.'),
    'callback' => 'schemax_base_availability_og_context_handler',
  );

  return $providers;
}

/**
 * OG-context handler.
 *
 * Get the group ID based on a Views argument wildcard.
 */
function schemax_base_view_og_context_handler() {
  $gids = array();

  // Get the router item.
  $item = menu_get_item();

  // Check if this is a views page.
  if ($item['page_callback'] !== 'views_page') {
    return;
  }

  // Check that user has permission to access the view.
  if ($item['access'] === FALSE) {
    return;
  }

  // Get position of Views argument wildcard in the path.
  if (is_array($item['load_functions'])) {
    if ($wildcard_position = array_search('views_arg_load', $item['load_functions'])) {
      $gids['node'][] = $item['map'][$wildcard_position];
    }
  }

  return $gids;
}

/**
 * OG-context handler.
 *
 * Get the group ID based on a Views argument wildcard.
 */
function schemax_base_availability_og_context_handler() {
  $gids = array();

  // Get the router item.
  $item = menu_get_item();

  // Check if this is a views page.
  if (isset($item['map'][2])) {
    if ($item['map'][2] === 'availability') {
      $gids['node'][] = $item['map'][1];
    }
    else {
      return;
    }
  }
  else {
    return;
  }

  // Check that user has permission to access the page.
  if ($item['access'] === FALSE) {
    return;
  }

  return $gids;
}
